'use strict';

var _identify = require('./../lib/identify');

var _identify2 = _interopRequireDefault(_identify);

var _chai = require('chai');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function areValuesEquals(obj1, obj2) {
  return JSON.stringify(obj1) === JSON.stringify(obj2);
}

var obj = { name: 'papswell' };
var obj2 = { name: 'slackbot' };

var ided = (0, _identify2.default)(obj);
var ided2 = (0, _identify2.default)(ided);
var otherIded = (0, _identify2.default)(obj2);

describe('Key generation', function () {
  it('should have a property named __id', function () {
    _chai.assert.isTrue(ided.hasOwnProperty('__id'));
  });
});

describe('Value generation', function () {
  it('should have a valid property named __id', function () {
    _chai.assert.isTrue(ided.__id && !!ided.__id.length);
  });

  it('should be unique', function () {
    _chai.assert.isTrue(otherIded.__id !== ided.__id);
  });
});

describe('Immutability', function () {
  it('should be different (reference and value) from the initial object', function () {
    _chai.assert.isTrue(obj !== ided);
    _chai.assert.isTrue(!areValuesEquals(obj, ided));
  });

  it('should be a different reference with wame values', function () {
    _chai.assert.isTrue(ided !== ided2);
    _chai.assert.isTrue(areValuesEquals(ided, ided2));
  });
});

var id = ided.__id;

describe('Non erasing mode', function () {
  it('should be the same __id after calling identify() on the same object', function () {
    ided = (0, _identify2.default)(ided);
    _chai.assert.isTrue(ided.__id === id);
  });

  it('should have the same value', function () {
    ided2 = (0, _identify2.default)(ided);
    _chai.assert.isTrue(ided2.__id === id);
    _chai.assert.isTrue(areValuesEquals(ided, ided2));
  });
});
