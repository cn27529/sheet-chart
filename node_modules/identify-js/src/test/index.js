import identify from './../lib/identify';
import { assert } from 'chai';

function areValuesEquals(obj1, obj2) {
  return JSON.stringify(obj1) === JSON.stringify(obj2);
}

const obj = { name: 'papswell' };
const obj2 = { name: 'slackbot' };

let ided = identify(obj);
let ided2 = identify(ided);
const otherIded = identify(obj2);

describe('Key generation', () => {
  it('should have a property named __id', () => {
    assert.isTrue(ided.hasOwnProperty('__id'));
  });
});

describe('Value generation', () => {
  it('should have a valid property named __id', () => {
    assert.isTrue(ided.__id && !!ided.__id.length);
  });

  it('should be unique', () => {
    assert.isTrue(otherIded.__id !== ided.__id);
  });
});

describe('Immutability', () => {
  it('should be different (reference and value) from the initial object', () => {
    assert.isTrue(obj !== ided);
    assert.isTrue(!areValuesEquals(obj, ided));
  });

  it('should be a different reference with wame values', () => {
    assert.isTrue(ided !== ided2);
    assert.isTrue(areValuesEquals(ided, ided2));
  });
});

const id = ided.__id;

describe('Non erasing mode', () => {
  it('should be the same __id after calling identify() on the same object', () => {
    ided = identify(ided);
    assert.isTrue(ided.__id === id);
  });

  it('should have the same value', () => {
    ided2 = identify(ided);
    assert.isTrue(ided2.__id === id);
    assert.isTrue(areValuesEquals(ided, ided2));
  });
});
